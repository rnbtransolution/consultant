<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>R&B Transolution - Restaurant Profit & Loss Statement (THB)</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display&family=Inter&family=Noto+Sans+Thai&display=swap" rel="stylesheet">
  <style>
    body {
        font-family: 'Inter', 'Noto Sans Thai', sans-serif;
        line-height: 1.8;
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px;
        background-color: #FFFEF7;
        color: #2F2F2F;
    }
    h1 {
        text-align: center;
        color: #1C1C1C;
        font-family: 'Playfair Display', serif;
        font-size: 2.5rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #DAA520;
        padding-bottom: 0.5rem;
    }
    .form-container {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 15px rgba(47, 47, 47, 0.1);
        border: 1px solid #F5F2E8;
    }
    .section {
        margin-bottom: 3rem;
        padding: 20px;
        background-color: #F5F2E8; /* Changed from #F9F7F0 */
        border-radius: 6px;
        border-left: 4px solid #B8860B;
    }
    .section-title { /* Styled to match h3 from Brand Standard Guide */
        font-family: 'Playfair Display', serif;
        font-size: 1.4rem; /* Changed from 1.2rem */
        margin-top: 1.5rem; /* Added */
        margin-bottom: 1rem; /* Adjusted for better spacing below title */
        color: #B8860B; /* Changed from #1C1C1C */
        font-weight: bold; /* Kept for div, as h3 in guide has bold by default */
    }
    .row {
        display: flex;
        margin-bottom: 10px;
        align-items: center;
    }
    .header-row {
        font-weight: bold;
        text-align: center;
        margin-bottom: 10px;
    }
    .header-row > div {
        flex: 1;
        padding: 5px;
    }
    .label {
        flex: 2;
        font-weight: 600;
        color: #2F2F2F;
    }
    .input-col, .budget-col, .calc-col, .variance-col {
        flex: 1;
        min-width: 100px;
        text-align: right;
        padding-right: 15px;
        color: #2F2F2F;
        font-size: 0.9rem;
    }
    .input-col input, .budget-col input {
        width: 90%;
        padding: 8px 12px;
        border: 1px solid #E0DBC8;
        border-radius: 4px;
        background-color: white;
        font-family: 'Inter', 'Noto Sans Thai', sans-serif; /* Added Noto Sans Thai */
        transition: border-color 0.3s;
    }
    input:focus {
        outline: none;
        border-color: #DAA520;
        box-shadow: 0 0 0 2px rgba(218, 165, 32, 0.2);
    }
    .result {
        font-weight: bold;
        color: #1C1C1C;
    }
    .divider {
        border-top: 1px solid #E0DBC8;
        margin: 20px 0;
    }
    .btn {
        background-color: #B8860B;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        font-family: 'Playfair Display', serif;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: background-color 0.3s;
        display: block;
        margin: 30px auto 0;
        width: 200px;
        text-align: center;
    }
    .btn:hover {
        background-color: #DAA520;
    }
    .summary-row {
        background-color: #F5F2E8;
        padding: 12px 15px;
        border-radius: 4px;
        margin-top: 10px;
    }
    .percentage {
        color: #B8860B;
        font-weight: 600;
    }
    .positive {
        color: green;
    }
    .negative {
        color: red;
    }
    footer {
        text-align: center;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #E0DBC8;
        color: #2F2F2F;
        font-size: 0.9rem;
    }
    @media (max-width: 768px) {
        .row {
            flex-direction: column;
            align-items: flex-start;
        }
        .input-col, .budget-col, .calc-col, .variance-col {
            width: 100%;
            margin-top: 5px;
            padding-right: 0;
            text-align: left;
        }
        input {
            width: 95%;
        }
        .header-row {
            flex-direction: column;
            align-items: flex-start;
        }
    }
  </style>
</head>
<body>
    <h1>Restaurant Profit & Loss Statement (THB)</h1>

    <div class="form-container">
        <div class="section">
            <div class="section-title">General Information</div>
            <div class="row">
                <div class="label">Number of Persons Served</div>
                <div class="input-col"><input type="number" id="numberOfPersons" value="1000"></div>
                <div class="budget-col"></div>
                <div class="calc-col"></div>
                <div class="variance-col"></div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Revenue</div>
            <div class="row header-row">
                <div class="label"></div>
                <div class="input-col">Actual</div>
                <div class="budget-col">Budget</div>
                <div class="calc-col"></div>
                <div class="variance-col">Actual vs Budget</div>
            </div>

            <div class="row">
                <div class="label">Food Revenue</div>
                <div class="input-col"><input type="number" id="foodRevenue" value="1200000"></div>
                <div class="budget-col"><input type="number" id="foodRevenueBudget" value="1150000"></div>
                <div class="calc-col">Food / Person: <span class="result" id="foodPerPerson">0</span></div>
                <div class="variance-col"><span class="result" id="foodRevenueVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Beverage Revenue</div>
                <div class="input-col"><input type="number" id="beverageRevenue" value="300000"></div>
                <div class="budget-col"><input type="number" id="beverageRevenueBudget" value="280000"></div>
                <div class="calc-col">Beverage / Person: <span class="result" id="beveragePerPerson">0</span></div>
                <div class="variance-col"><span class="result" id="beverageRevenueVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Other Revenue</div>
                <div class="input-col"><input type="number" id="otherRevenue" value="5000"></div>
                <div class="budget-col"><input type="number" id="otherRevenueBudget" value="4000"></div>
                <div class="calc-col"></div>
                <div class="variance-col"><span class="result" id="otherRevenueVariance">0</span></div>
            </div>

            <div class="divider"></div>

            <div class="row summary-row">
                <div class="label">Total Revenue</div>
                <div class="input-col"><span class="result" id="totalRevenue">0</span></div>
                <div class="budget-col"><span class="result" id="totalRevenueBudget">0</span></div>
                <div class="calc-col"></div>
                <div class="variance-col"><span class="result" id="totalRevenueVariance">0</span></div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Cost of Goods Sold (COGS)</div>
            <div class="row header-row">
                <div class="label"></div>
                <div class="input-col">Actual</div>
                <div class="budget-col">Budget</div>
                <div class="calc-col">% of Revenue</div>
                <div class="variance-col">Actual vs Budget</div>
            </div>

            <div class="row">
                <div class="label">Food Cost</div>
                <div class="input-col"><input type="number" id="foodCost" value="300000"></div>
                <div class="budget-col"><input type="number" id="foodCostBudget" value="280000"></div>
                <div class="calc-col"><span class="result" id="foodCostPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="foodCostVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Beverage Cost</div>
                <div class="input-col"><input type="number" id="beverageCost" value="60000"></div>
                <div class="budget-col"><input type="number" id="beverageCostBudget" value="55000"></div>
                <div class="calc-col"><span class="result" id="beverageCostPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="beverageCostVariance">0</span></div>
            </div>

            <div class="divider"></div>

            <div class="row summary-row">
                <div class="label">Total COGS</div>
                <div class="input-col"><span class="result" id="totalCogs">0</span></div>
                <div class="budget-col"><span class="result" id="totalCogsBudget">0</span></div>
                <div class="calc-col"><span class="result" id="totalCogsPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="totalCogsVariance">0</span></div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Gross Profit</div>
            <div class="row header-row">
                <div class="label"></div>
                <div class="input-col">Actual</div>
                <div class="budget-col">Budget</div>
                <div class="calc-col">% of Revenue</div>
                <div class="variance-col">Actual vs Budget</div>
            </div>

            <div class="row summary-row">
                <div class="label">Gross Profit</div>
                <div class="input-col"><span class="result" id="grossProfit">0</span></div>
                <div class="budget-col"><span class="result" id="grossProfitBudget">0</span></div>
                <div class="calc-col"><span class="result" id="grossProfitPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="grossProfitVariance">0</span></div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Operating Expenses</div>
            <div class="row header-row">
                <div class="label"></div>
                <div class="input-col">Actual</div>
                <div class="budget-col">Budget</div>
                <div class="calc-col">% of Revenue</div>
                <div class="variance-col">Actual vs Budget</div>
            </div>

            <div class="row">
                <div class="label">Salaries & Wages</div>
                <div class="input-col"><input type="number" id="salariesWages" value="400000"></div>
                <div class="budget-col"><input type="number" id="salariesWagesBudget" value="380000"></div>
                <div class="calc-col"><span class="result" id="salariesWagesPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="salariesWagesVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Rent</div>
                <div class="input-col"><input type="number" id="rent" value="100000"></div>
                <div class="budget-col"><input type="number" id="rentBudget" value="100000"></div>
                <div class="calc-col"><span class="result" id="rentPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="rentVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Utilities</div>
                <div class="input-col"><input type="number" id="utilities" value="30000"></div>
                <div class="budget-col"><input type="number" id="utilitiesBudget" value="28000"></div>
                <div class="calc-col"><span class="result" id="utilitiesPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="utilitiesVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Marketing</div>
                <div class="input-col"><input type="number" id="marketing" value="20000"></div>
                <div class="budget-col"><input type="number" id="marketingBudget" value="25000"></div>
                <div class="calc-col"><span class="result" id="marketingPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="marketingVariance">0</span></div>
            </div>

            <div class="row">
                <div class="label">Other Operating Expenses</div>
                <div class="input-col"><input type="number" id="otherExpenses" value="15000"></div>
                <div class="budget-col"><input type="number" id="otherExpensesBudget" value="12000"></div>
                <div class="calc-col"><span class="result" id="otherExpensesPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="otherExpensesVariance">0</span></div>
            </div>

            <div class="divider"></div>

            <div class="row summary-row">
                <div class="label">Total Operating Expenses</div>
                <div class="input-col"><span class="result" id="totalOperatingExpenses">0</span></div>
                <div class="budget-col"><span class="result" id="totalOperatingExpensesBudget">0</span></div>
                <div class="calc-col"><span class="result" id="totalOperatingExpensesPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="totalOperatingExpensesVariance">0</span></div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Gross Operating Profit (GOP)</div>
            <div class="row header-row">
                <div class="label"></div>
                <div class="input-col">Actual</div>
                <div class="budget-col">Budget</div>
                <div class="calc-col">% of Revenue</div>
                <div class="variance-col">Actual vs Budget</div>
            </div>

            <div class="row summary-row">
                <div class="label">Gross Operating Profit</div>
                <div class="input-col"><span class="result" id="gop">0</span></div>
                <div class="budget-col"><span class="result" id="gopBudget">0</span></div>
                <div class="calc-col"><span class="result" id="gopPercent">0%</span></div>
                <div class="variance-col"><span class="result" id="gopVariance">0</span></div>
            </div>
        </div>

        <button class="btn" onclick="calculateAll()">Calculate P&L</button>
    </div>

    <footer>
        <p>&copy; 2025 R&B Transolution. All rights reserved.</p>
    </footer>

    <script>
        function calculateAll() {
            // Get input values
            const foodRevenue = parseFloat(document.getElementById('foodRevenue').value) || 0;
            const beverageRevenue = parseFloat(document.getElementById('beverageRevenue').value) || 0;
            const otherRevenue = parseFloat(document.getElementById('otherRevenue').value) || 0;
            const foodRevenueBudget = parseFloat(document.getElementById('foodRevenueBudget').value) || 0;
            const beverageRevenueBudget = parseFloat(document.getElementById('beverageRevenueBudget').value) || 0;
            const otherRevenueBudget = parseFloat(document.getElementById('otherRevenueBudget').value) || 0;

            const foodCost = parseFloat(document.getElementById('foodCost').value) || 0;
            const beverageCost = parseFloat(document.getElementById('beverageCost').value) || 0;
            const foodCostBudget = parseFloat(document.getElementById('foodCostBudget').value) || 0;
            const beverageCostBudget = parseFloat(document.getElementById('beverageCostBudget').value) || 0;

            const salariesWages = parseFloat(document.getElementById('salariesWages').value) || 0;
            const rent = parseFloat(document.getElementById('rent').value) || 0;
            const utilities = parseFloat(document.getElementById('utilities').value) || 0;
            const marketing = parseFloat(document.getElementById('marketing').value) || 0;
            const otherExpenses = parseFloat(document.getElementById('otherExpenses').value) || 0;
            const salariesWagesBudget = parseFloat(document.getElementById('salariesWagesBudget').value) || 0;
            const rentBudget = parseFloat(document.getElementById('rentBudget').value) || 0;
            const utilitiesBudget = parseFloat(document.getElementById('utilitiesBudget').value) || 0;
            const marketingBudget = parseFloat(document.getElementById('marketingBudget').value) || 0;
            const otherExpensesBudget = parseFloat(document.getElementById('otherExpensesBudget').value) || 0;

            // Calculate Total Revenue
            const totalRevenue = foodRevenue + beverageRevenue + otherRevenue;
            const totalRevenueBudget = foodRevenueBudget + beverageRevenueBudget + otherRevenueBudget;
            document.getElementById('totalRevenue').textContent = totalRevenue.toLocaleString('en-US');
            document.getElementById('totalRevenueBudget').textContent = totalRevenueBudget.toLocaleString('en-US');
            const totalRevenueVariance = totalRevenue - totalRevenueBudget;
            document.getElementById('totalRevenueVariance').textContent = totalRevenueVariance.toLocaleString('en-US');
            applyVarianceColor(document.getElementById('totalRevenueVariance'), totalRevenueVariance);

            // Calculate COGS
            const totalCogs = foodCost + beverageCost;
            const totalCogsBudget = foodCostBudget + beverageCostBudget;
            document.getElementById('totalCogs').textContent = totalCogs.toLocaleString('en-US');
            document.getElementById('totalCogsBudget').textContent = totalCogsBudget.toLocaleString('en-US');
            const totalCogsVariance = totalCogs - totalCogsBudget;
            document.getElementById('totalCogsVariance').textContent = totalCogsVariance.toLocaleString('en-US');
            applyVarianceColor(document.getElementById('totalCogsVariance'), -totalCogsVariance); // Negative variance is good for costs

            const foodCostPercent = totalRevenue > 0 ? (foodCost / totalRevenue * 100) : 0;
            const beverageCostPercent = totalRevenue > 0 ? (beverageCost / totalRevenue * 100) : 0;
            const totalCogsPercent = totalRevenue > 0 ? (totalCogs / totalRevenue * 100) : 0;
            document.getElementById('foodCostPercent').textContent = foodCostPercent.toFixed(2) + '%';
            document.getElementById('beverageCostPercent').textContent = beverageCostPercent.toFixed(2) + '%';
            document.getElementById('totalCogsPercent').textContent = totalCogsPercent.toFixed(2) + '%';

            // Calculate Gross Profit
            const grossProfit = totalRevenue - totalCogs;
            const grossProfitBudget = totalRevenueBudget - totalCogsBudget;
            document.getElementById('grossProfit').textContent = grossProfit.toLocaleString('en-US');
            document.getElementById('grossProfitBudget').textContent = grossProfitBudget.toLocaleString('en-US');
            const grossProfitVariance = grossProfit - grossProfitBudget;
            document.getElementById('grossProfitVariance').textContent = grossProfitVariance.toLocaleString('en-US');
            applyVarianceColor(document.getElementById('grossProfitVariance'), grossProfitVariance);

            const grossProfitPercent = totalRevenue > 0 ? (grossProfit / totalRevenue * 100) : 0;
            document.getElementById('grossProfitPercent').textContent = grossProfitPercent.toFixed(2) + '%';

            // Calculate Operating Expenses
            const totalOperatingExpenses = salariesWages + rent + utilities + marketing + otherExpenses;
            const totalOperatingExpensesBudget = salariesWagesBudget + rentBudget + utilitiesBudget + marketingBudget + otherExpensesBudget;
            document.getElementById('totalOperatingExpenses').textContent = totalOperatingExpenses.toLocaleString('en-US');
            document.getElementById('totalOperatingExpensesBudget').textContent = totalOperatingExpensesBudget.toLocaleString('en-US');
            const totalOperatingExpensesVariance = totalOperatingExpenses - totalOperatingExpensesBudget;
            document.getElementById('totalOperatingExpensesVariance').textContent = totalOperatingExpensesVariance.toLocaleString('en-US');
            applyVarianceColor(document.getElementById('totalOperatingExpensesVariance'), -totalOperatingExpensesVariance); // Negative variance is good for expenses

            const salariesWagesPercent = totalRevenue > 0 ? (salariesWages / totalRevenue * 100) : 0;
            const rentPercent = totalRevenue > 0 ? (rent / totalRevenue * 100) : 0;
            const utilitiesPercent = totalRevenue > 0 ? (utilities / totalRevenue * 100) : 0;
            const marketingPercent = totalRevenue > 0 ? (marketing / totalRevenue * 100) : 0;
            const otherExpensesPercent = totalRevenue > 0 ? (otherExpenses / totalRevenue * 100) : 0;
            const totalOperatingExpensesPercent = totalRevenue > 0 ? (totalOperatingExpenses / totalRevenue * 100) : 0;

            document.getElementById('salariesWagesPercent').textContent = salariesWagesPercent.toFixed(2) + '%';
            document.getElementById('rentPercent').textContent = rentPercent.toFixed(2) + '%';
            document.getElementById('utilitiesPercent').textContent = utilitiesPercent.toFixed(2) + '%';
            document.getElementById('marketingPercent').textContent = marketingPercent.toFixed(2) + '%';
            document.getElementById('otherExpensesPercent').textContent = otherExpensesPercent.toFixed(2) + '%';
            document.getElementById('totalOperatingExpensesPercent').textContent = totalOperatingExpensesPercent.toFixed(2) + '%';

            // Calculate Gross Operating Profit (GOP)
            const gop = grossProfit - totalOperatingExpenses;
            const gopBudget = grossProfitBudget - totalOperatingExpensesBudget;
            document.getElementById('gop').textContent = gop.toLocaleString('en-US');
            document.getElementById('gopBudget').textContent = gopBudget.toLocaleString('en-US');
            const gopVariance = gop - gopBudget;
            document.getElementById('gopVariance').textContent = gopVariance.toLocaleString('en-US');
            applyVarianceColor(document.getElementById('gopVariance'), gopVariance);

            const gopPercent = totalRevenue > 0 ? (gop / totalRevenue * 100) : 0;
            document.getElementById('gopPercent').textContent = gopPercent.toFixed(2) + '%';

            // Calculate per person metrics
            const numberOfPersons = parseFloat(document.getElementById('numberOfPersons').value) || 1; // Default to 1 to avoid division by zero
            document.getElementById('foodPerPerson').textContent = (numberOfPersons > 0 ? (foodRevenue / numberOfPersons) : 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('beveragePerPerson').textContent = (numberOfPersons > 0 ? (beverageRevenue / numberOfPersons) : 0).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Apply color to percentage elements based on value (positive/negative)
            applyPercentageColor(document.getElementById('foodCostPercent'), foodCostPercent, true);
            applyPercentageColor(document.getElementById('beverageCostPercent'), beverageCostPercent, true);
            applyPercentageColor(document.getElementById('totalCogsPercent'), totalCogsPercent, true);
            applyPercentageColor(document.getElementById('grossProfitPercent'), grossProfitPercent);
            applyPercentageColor(document.getElementById('salariesWagesPercent'), salariesWagesPercent, true);
            applyPercentageColor(document.getElementById('rentPercent'), rentPercent, true);
            applyPercentageColor(document.getElementById('utilitiesPercent'), utilitiesPercent, true);
            applyPercentageColor(document.getElementById('marketingPercent'), marketingPercent, true);
            applyPercentageColor(document.getElementById('otherExpensesPercent'), otherExpensesPercent, true);
            applyPercentageColor(document.getElementById('totalOperatingExpensesPercent'), totalOperatingExpensesPercent, true);
            applyPercentageColor(document.getElementById('gopPercent'), gopPercent);
        }

        function applyVarianceColor(element, value) {
            element.classList.remove('positive', 'negative');
            if (value > 0) {
                element.classList.add('positive');
            } else if (value < 0) {
                element.classList.add('negative');
            }
        }

        function applyPercentageColor(element, percent, inverse = false) {
            element.classList.remove('positive', 'negative');
            if (inverse) { // For costs/expenses, lower is better
                if (percent < 0) { // Should not be negative, but as a safeguard
                    element.classList.add('positive');
                } else if (percent > 30) { // Example threshold for 'bad' cost percentage, can be adjusted
                    element.classList.add('negative');
                } else {
                    element.classList.add('positive');
                }
            } else { // For revenues/profits, higher is better
                if (percent > 0) {
                    element.classList.add('positive');
                } else if (percent < 0) {
                    element.classList.add('negative');
                }
            }
        }

        // Calculate on page load
        window.onload = calculateAll;
    </script>
</body>
</html>
